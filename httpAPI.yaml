# Parameters:
#   SignalingStackName:
#     Type: String
#     Default: SignalingStack
Resources:
  RoomCountsTable2301:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "RoomCountsTable2301"
      KeySchema:
        - AttributeName: roomId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: roomId
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  DynamoDBLambdaPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "DynamoDBLambdaPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:DescribeStream"
              - "dynamodb:GetRecords"
              - "dynamodb:GetShardIterator"
              - "dynamodb:ListStreams"
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ConnectionsTable2301/stream/*"
          - Effect: Allow
            Action:
              - "dynamodb:UpdateItem"
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${RoomCountsTable2301}"
      Roles:
        - !Ref CrossTableLambdaExecutionRole

  TableChangeLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import { DynamoDBClient } from '@aws-sdk/client-dynamodb';
          import { unmarshall } from '@aws-sdk/util-dynamodb';
          import { DynamoDBDocumentClient, UpdateCommand, GetCommand } from '@aws-sdk/lib-dynamodb';

          const TABLE_NAME = 'rooms';
          const REGION = process.env.AWS_REGION || 'us-east-2';
          const marshallOptions = {
            removeUndefinedValues: true, // false, by default.
          };

          const client = new DynamoDBClient({ region: REGION });
          const dynamo = DynamoDBDocumentClient.from(client, {
            marshallOptions,
          });

          const updateRoomStatusById = async (id, status) => {
            const params = {
              TableName: TABLE_NAME,
              Key: { id },
              UpdateExpression: 'set #current_status = :s',
              ExpressionAttributeNames: { '#current_status': 'status' },
              ExpressionAttributeValues: { ':s': status },
            };

            await dynamo.send(new UpdateCommand(params));
          };

          const getRoomStatusById = async (id) => {
            const params = {
              TableName: TABLE_NAME,
              Key: { id },
            };

            const dataFromDatabase = await dynamo.send(new GetCommand(params));
            const roomResource = dataFromDatabase.Item ? dataFromDatabase.Item : null;

            if (roomResource && roomResource.status) return roomResource.status;

            return null;
          };

          export const getNewStatusOnConnect = (prevStatus) => {
            let newStatus;
            switch (prevStatus) {
              case 'open':
                newStatus = 'occupied';
                break;
              case 'occupied':
                newStatus = 'full';
                break;
              default:
                throw new Error(`Cannot change the status from ${prevStatus}`);
            }

            return newStatus;
          };

          export const getNewStatusOnDisconnect = (prevStatus) => {
            let newStatus;
            switch (prevStatus) {
              case 'full':
                newStatus = 'occupied';
                break;
              case 'occupied':
                newStatus = 'closed';
                break;
              default:
                throw new Error(`Cannot change the status from ${prevStatus}`);
            }

            return newStatus;
          };

          export const lambdaHandler = async (event) => {
            let roomId;
            const record = event.Records[0];

            console.log('event: ', event);
            console.log('records:', event.Records);
            console.log('record length:', event.Records.length);
            console.log('Event name:', record.eventName);
            console.log('new image: ', record.dynamodb.NewImage);
            console.log('old image: ', record.dynamodb.OldImage);
            const dynamoDbRecord = record.dynamodb.NewImage;
            const recordData = unmarshall(dynamoDbRecord);

            // Guard clauses before talking with db
            if (record.eventName === 'INSERT') return;
            if (!recordData.peerId) {
              console.log('Database change does not have a room ID attach to it. Abort.');
              return;
            }

            roomId = recordData.peerId;
            console.log('ROOM ID CAPTURED: ', roomId);

            try {
              const prevStatus = await getRoomStatusById(roomId);
              if (!prevStatus) {
                console.log(`The status of the room ${roomId} is missing. Abort.`);
                return;
              }

              let newStatus;

              switch (record.eventName) {
                case 'MODIFY':
                  // a peer connected with a specific room
                  newStatus = getNewStatusOnConnect(prevStatus);
                  break;
                case 'REMOVE':
                  // a peer disconnect from a specific room
                  newStatus = getNewStatusOnDisconnect(prevStatus);
                  break;
                default:
                  return;
              }
              await updateRoomStatusById(roomId, newStatus);
              console.log('Room status updated!');
            } catch (err) {
              console.log('Error while updating the database:', err);
            }
          };

      Role: !GetAtt
        - CrossTableLambdaExecutionRole
        - Arn
      Environment:
        Variables:
          table: !Ref RoomCountsTable2301
      Handler: index.handler
      Runtime: nodejs14.x
    DependsOn:
      - DynamoDBLambdaPolicy
      - CrossTableLambdaExecutionRole

  LambdaToDynamoDBStreamMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn:
        Fn::ImportValue: "NewTestSignalStack-StreamArn"
      FunctionName: !Ref TableChangeLambdaFunction
      StartingPosition: LATEST

  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: MyHTTPAPIGateway
      ProtocolType: HTTP
      RouteSelectionExpression: "${request.method} ${request.path}"

  RoomsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: "GET /rooms/{id}"
      AuthorizationType: NONE
      Target: !Sub "integrations/${RoomsGetIntegration}"

  CreateRoomRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: "POST /createRoom"
      AuthorizationType: NONE
      Target: !Sub "integrations/${CreateRoomIntegration}"

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: $default
      AuthorizationType: NONE
      Target: !Sub "integrations/${DefaultRouteIntegration}"

  DefaultRouteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DefaultLambdaFunction.Arn}/invocations"
      PayloadFormatVersion: "2.0"

  RoomsGetIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RoomsGetFunction.Arn}/invocations"
      PayloadFormatVersion: "2.0"

  CreateRoomIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateRoomFunction.Arn}/invocations"
      PayloadFormatVersion: "2.0"

  DefaultLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          exports.handler = async (event, context) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Unknown route. Supported routes include GET /rooms/roomId and POST /createRoom' })
            };
          }
      Role: !GetAtt
        - LambdaExecutionRole
        - Arn
      Handler: index.handler
      Runtime: nodejs14.x
    DependsOn:
      - LambdaDefaultPolicy2301

  RoomsGetFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const ddb = new AWS.DynamoDB.DocumentClient();
          const table = "RoomCountsTable2301";

          exports.handler = async (event, context) => {
            try {
              const roomId = event.pathParameters.id;

              const getItemParams = {
                TableName: table,
                Key: {
                  roomId: roomId,
                }
              };

              const existingItem = await ddb.get(getItemParams).promise();

              if (existingItem.Item) {
                // If item already exists, return info about the item
                return {
                  statusCode: 200,
                  body: JSON.stringify({ message: 'Room info:', item: existingItem.Item })
                };
              } else {
                return {
                  statusCode: 400,
                  body: JSON.stringify({ message: 'Room does not exist' })
                };
              }
            } catch (error) {
              console.error('Error adding or retrieving item from DynamoDB table: ', error);
              return {
                statusCode: 500,
                body: JSON.stringify({ error: 'Could not add or retrieve item from DynamoDB table' })
              };
            }
          };

      Role: !GetAtt
        - LambdaExecutionRole
        - Arn
      Environment:
        Variables:
          table: !Ref RoomCountsTable2301
      Handler: index.handler
      Runtime: nodejs14.x
    DependsOn:
      - LambdaDefaultPolicy2301
      - LambdaExecutionRole

  CrossTableLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: "CloudWatchLogsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: "CloudWatchLogsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

  LambdaDefaultPolicy2301:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:ConditionCheckItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - !GetAtt
                - RoomCountsTable2301
                - Arn
              - !Ref "AWS::NoValue"
        Version: 2012-10-17
      PolicyName: LambdaDefaultPolicy2301
      Roles:
        - !Ref LambdaExecutionRole

  CreateRoomFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const ddb = new AWS.DynamoDB.DocumentClient();
          const table = "RoomCountsTable2301";

          exports.handler = async (event, context) => {
          try {
            const roomId = AWS.util.uuid.v4()
            console.log(roomId, "ROOM ID HERE");
            const now = new Date();
            const utc = now.toUTCString();
            const config = event.body ? JSON.parse(event.body) : {};

            const itemParams = {
              TableName: table,
              Item: {
                roomId: roomId, 
                unique_name: config.uniqueName || '',
                created_at: utc,
                updated_at: utc,
                status: "open",
              }
            };
            
            await ddb.put(itemParams).promise();

            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Item added to DynamoDB table', id: roomId })
            };
            } catch (error) {
            console.error('Error adding item to DynamoDB table: ', error);
            return {
              statusCode: 500,
              body: JSON.stringify({ error: error })
            };
            }
          };

      Role: !GetAtt
        - LambdaExecutionRole
        - Arn
      Environment:
        Variables:
          table: !Ref RoomCountsTable2301
      Handler: index.handler
      Runtime: nodejs14.x
    DependsOn:
      - LambdaDefaultPolicy2301
      - LambdaExecutionRole

  stageDev:
    Type: "AWS::ApiGatewayV2::Stage"
    Properties:
      ApiId: !Ref ApiGateway
      StageName: dev
      AutoDeploy: true
  HTTPAPIGetRoomsLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt
        - RoomsGetFunction
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGateway
          - /*/*
  HTTPAPICreateRoomLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt
        - CreateRoomFunction
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGateway
          - /*/*
  HTTPAPIDefaultLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt
        - DefaultLambdaFunction
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref ApiGateway
          - /*/*
